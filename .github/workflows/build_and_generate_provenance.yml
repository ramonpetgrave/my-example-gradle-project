# using example at https://github.com/slsa-framework/slsa-github-generator/blob/main/internal/builders/generic/README.md#getting-started

name: Run Gradle on PRs
on: [pull_request]
env:
  ARTIFACT_PATH: "${{ github.workspace }}/app/build/libs/app.jar"
jobs:
  # This step builds our artifacts, uploads them to the workflow run, and
  # outputs their digest.
  build:
    runs-on: self-hosted
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: 11

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v3

    - name: Execute Gradle build
      run: ./gradlew build

    - name: Generate hashes
      shell: bash
      id: hash
      run: |
        # sha256sum generates sha256 hash for all artifacts.
        # base64 -w0 encodes to base64 and outputs on a single line.
        # sha256sum artifact1 artifact2 ... | base64 -w0
        echo "hashes=$(sha256sum ${{ env.ARTIFACT_PATH }} | base64 -w0)" >> "$GITHUB_OUTPUT"

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: app
        path: ${{ env.ARTIFACT_PATH }}
  # This step calls the generic workflow to generate provenance.
  provenance:
    needs: [build]
    permissions:
      actions: read
      id-token: write
      contents: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.9.0
    with:
      base64-subjects: "${{ needs.build.outputs.hashes }}"
      # Upload provenance to a new release
      upload-assets: true
