name: GitHub Actions Demo
run-name: ${{ github.actor }} is testing out GitHub Actions 🚀
on: [push]
env:
  GH_TOKEN: ${{ github.token }}
permissions:
  id-token: write
  actions: read
jobs:
  Another-Job:
    runs-on: ubuntu-latest
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - name: get the job details
        run: |
          echo ${{ github.run_id }}
          echo ${{ github.run_number }}
          echo ${{ github.run_attempt }}
          echo ${{ github.action }}
          echo ${{ github.job }}
          gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs
  Explore-GitHub-Actions:
    name: Another-Job
    runs-on: ubuntu-latest
    steps:
      # - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      # - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      # - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      # - name: Check out repository code
      #   uses: actions/checkout@v4
      # - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      # - run: echo "🖥️ The workflow is now ready to test your code on the runner."
      # - name: List files in the repository
      #   run: |
      #     ls ${{ github.workspace }}
      - run: echo "🍏 This job's status is ${{ job.status }}."
      # - name: Show the OIDC token
      #   run: |
      #     echo token: $ACTIONS_ID_TOKEN_REQUEST_TOKEN
      #     echo url: $ACTIONS_ID_TOKEN_REQUEST_URL
      #     curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL" | jq '.value'

      - name: get the job details
        run: |
          echo ${{ github.run_id }}
          echo ${{ github.run_number }}
          echo ${{ github.run_attempt }}
          echo ${{ github.action }}
          echo ${{ github.job }}
          gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs
      - name: check if self-hostedX
        run: |
          gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs \
          | jq '.jobs.[].labels' | jq -es 'flatten | any(. == "self-hostedX") | not' >/dev/null \
            && echo success || echo failure
      - name: check if self-hostedX
        run: |
          pwd
          ls -lahR
      - name: debug
        run: |
          assert_true() {
              local actual="$1"
              local msg="${2-}"
          
              assert_eq true "$actual" "$msg"
              return "$?"
          }
          
          assert_eq() {
              local expected="$1"
              local actual="$2"
              local msg="${3-}"
          
              if [ "$expected" == "$actual" ]; then
                  return 0
              else
                  ([ "${#msg}" -gt 0 ] && log_failure "$expected == $actual :: $msg") || true
                  return 1
              fi
          }
          
          log_failure() {
              printf "${RED}✖ %s${NORMAL}\n" "$@" >&2
          }
      
          TARGET_LABEL="self-hosted"

          JOB_LABLES=$(gh api \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs \
            | jq '.jobs[].labels' | jq -s 'flatten'
          )
          echo Job Labels: "$JOB_LABLES"

          assert_true $(echo $JOB_LABLES | jq 'any(. == "$TARGET_LABEL")')


# /repos/${{ github.repository }}/actions/jobs/${{ github.job }}

